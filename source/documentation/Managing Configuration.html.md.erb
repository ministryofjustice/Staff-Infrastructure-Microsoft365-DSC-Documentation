# Managing Configuration

The following section details how the workload configuration is set between the various data files within the Configuration repository.

## Data Files

A data file in PowerShell Desired State Configuration is a structured file that contains configuration data, such as node-specific settings and environment variables, which are used to customise and manage the desired state of target nodes (in this instance, tenants)

When reviewing the Configuration repository, you will see a folder called `datafiles`. This folder contains two child folders, one named `Tenants` and another called `templates`

The `Tenants` folder contains all of the tenant specific configuration files, the `templates` folder contains all of the global configuration files that are to be applied to all tenants under the management of Microsoft 365 DSC.

## Global Settings

### Global

The global layer data files define the workload settings that will be applied to all tenants that are under the management of Microsoft 365 DSC as the base configuration.

Location: `Staff-Infrastructure-Microsoft365-DSC-Configuration\DataFiles\Templates\Global\Global*.psd1`

### Enforced

The enforced data files define settings that are enforced for all tenants. Settings in this file must be present in the global files with the same values and cannot be specified in any of the tenants specific files.

These settings are validated using a to a unit test approach during the build pipeline, this is first validated against the global layer, requiring all settings that are present in the enforced data files to be configured exactly as specified in the related Global datafiles. If this test is successful a second unit test is carried out against the tenant layer checking that none of the settings are present within tenant specific files, preventing all settings in the Enforced layer from being overridden with different values.

Location: `Staff-Infrastructure-Microsoft365-DSC-Configuration\DataFiles\Templates\Enforced\Enforced*.psd1`

## Tenant Specific Settings

### Tenant

These are the settings that are tenant specific. Either because the workload setting is specific to only that tenant so cannot be present in the global configuration, or because you want to override a setting from the Global layer (SettingX = 1 in Global, but for this tenant it should be SettingX = 2)

Location: `Staff-Infrastructure-Microsoft365-DSC-Configuration\DataFiles\Tenants\<Tenant>\<TenantName><WorkloadName>.psd1`

## Example Configuration 

The following section is intended to visualise how settings would be applied to DEV, NLE & PROD based on how various workload settings were configured within different data files.

In this example, the `Global` configuration contains the following settings:

```powershell
@{
	NonNodeData = @{
		Teams = @{
			ChannelsPolicies = @(
				@{
					AllowOrgWideTeamCreation = $false
                    AllowChannelSharingToExternalUser  = $true
				}
			)
		}
	}
}
```

In this example, the `Enforced` configuration contains the following settings:

```powershell
@{
	NonNodeData = @{
		Teams = @{
			ChannelsPolicies = @(
				@{
                    AllowChannelSharingToExternalUser  = $true
				}
			)
		}
	}
}
```

In this example, the `DEV` tenant specific configuration contains the following settings:

```powershell
@{
	NonNodeData = @{
		Teams = @{
			ChannelsPolicies = @(
				@{
					AllowOrgWideTeamCreation = $true
				}
			)
		}
		AzureAD = @{
			TenantDetails = @(
				@{
					TenantId = DEV
				}
			)
		}
	}
}
```

In this example, the `NLE` tenant specific configuration contains the following settings:

```powershell
@{
	NonNodeData = @{
		Teams = @{
			ChannelsPolicies = @(
				@{
					AllowOrgWideTeamCreation = $true
				}
			)
		}
		AzureAD = @{
			TenantDetails = @(
				@{
					TenantId = NLE
				}
			)
		}
	}
}
```

In this example, the `PROD` tenant specific configuration contains the following settings:

```powershell
@{
	NonNodeData = @{
		AzureAD = @{
			TenantDetails = @(
				@{
					TenantId = PROD
				}
			)
		}
	}
}
```

When the build pipeline runs, it will read and merge the various datafiles contained within the Configuration repository using the logic displayed within the diagram shown below, resulting in applied settings within each tenants MOF file shown at the bottom of the flow.

<pre class="mermaid">
flowchart TD
    A[Build Pipeline start] --> B[Read and merge Enforced configuration files]
    B --> C[Read and merge Global configuration files]
    C --> D{Mandatory settings present in Global?}
    D -->|PASS| E[Read and merge Tenant-specific configuration files]
    D -->|FAIL| F[Error: Enforced settings missing in Global]
    E --> G{Enforced settings absent in Tenant?}
    G -->|PASS| H[Merge Global and Tenant configurations]
    G -->|FAIL| J[Error: Enforced settings present in Tenant]
    H --> I[Build script completed successfully]
    H --> J1[Applied Settings in MOF files]
    J1 --> K[DEV: 
        AllowChannelSharingToExternalUser = true,
        AllowOrgWideTeamCreation = true,
        TenantId = DEV]
    J1 --> L[NLE: 
        AllowChannelSharingToExternalUser = true,
        AllowOrgWideTeamCreation = true,
        TenantId = NLE]
    J1 --> M[PROD: 
        AllowChannelSharingToExternalUser = true,
        AllowOrgWideTeamCreation = false,
        TenantId = PROD]
</pre>


## Understanding Available Properties 

To understand the available properties and settings for a given version of Microsoft365DSC, you can use the M365DSC.CompositeResources module. This module provides a complete reference of all resources and settings.

To export an example data file to a location of your choice, follow these steps:
1. Install the M365DSC.CompositeResources module:

```powershell

	Install-Module -Name M365DSC.CompositeResources -Force

```

2. Run the following command to generate an example data file:

```powershell

	New-M365DSCExampleDataFile -OutputPath "C:\Path\To\Output"

```

This will create a sample configuration file with all available properties.

For more details, refer to the [New-M365DSCExampleDataFile documentation](https://github.com/ykuijs/M365DSC.CompositeResources/blob/main/source/Public/New-M365DSCExampleDataFile.ps1)

## Exporting Existing Configurations 

You can export the existing configuration from a tenant using the Export Pipeline. This pipeline produces an artifact containing both the raw DSC output and the composite module (where available) for the workloads defined in the tenants generic file. 

* Pipeline: `Staff-Infrastructure-Microsoft365-DSC-Configuration\Pipelines\export.yaml`
* Script: `Staff-Infrastructure-Microsoft365-DSC-Infrastructure\Scripts\Export.ps1`


## Workflow

1. Admin creates a new branch from the `main` Staff-Infrastructure-Microsoft365-DSC-Configuration repository, with a name relevant to the change they are making e.g. `DEV-TeamsMeetingPolicy-update`
2. Admin makes the required configuration changes to the data files necessary to the change they are making
3. Admin commits and syncs the changes to the feature branch
4. Admin creates a pull request (PR) to merge the changes to the `main` repository, proving a description of what changes have been made to allow others to more efficiently peer review the work
5. The build pipeline runs on the PR
6. Depending on the files that have been changed the relevant lead engineers or architects will be asked to review and approve the change, this is defined based on the content of the `codeowners` file
7. The merged PR triggers a pipeline to compile Managed Object Format (MOF) files. The pipeline calls Azure Key Vault to retrieve the credentials that are used by the tenant specific service principle(s) in the MOF files, and publishes the artifacts ready for deployment
8. The deployment pipeline is triggered that uses the compiled MOF files to deploy configuration changes to the tenants that are managed via Microsoft365DSC
9. Admin who committed the changes reviews the relevant pipeline & config in the M365 admin center to confirm the expected changes have been successfully applied


### Build and Validation
1. Build Pipeline (build.yaml):
	* Compiles MOF files from tenant configuration data.
	* Copies necessary scripts and resources to the output directory.

2. Pull Request Validation (prvalidation.yaml):
	* Validates configuration changes in pull requests.
	* Ensures compliance with naming and encoding standards.

### Deployment
1. Dependency Management (dependencies.yaml):
	* Retrieves secrets from Azure Key Vault.
	* Prepares dependencies for deployment.

2. Deployment Pipeline (deployment.yaml):
	* Deploys configurations to Microsoft 365 tenants.
	* Executes orchestration logic from the Infrastructure repository.

### Compliance Testing
1. Compliance Testing Pipeline (testcompliancy.yaml):
	* Tests tenant compliance with desired configurations.
	* Generates HTML compliance reports.

2. Export Pipeline (export.yaml):
	* Deploys configurations to Microsoft 365 tenants.
	* Exports tenant configurations for auditing and traceability.

















<script type="module">
  import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
  mermaid.initialize({
    startOnLoad: true,
    theme: 'base',
    themeVariables: {
      primaryColor: '#C4C4C4', // GOV UK blue colour
      primaryTextColor: '#ffffff', // White text for contrast
      primaryBorderColor: '#A8A8A8', // Darker blue border
	  lineColor: '#333333', // Dark grey lines
	  secondaryColor: 'C4C4C4', // Default codeblock colour for decision text boxes
    }
  });
</script>