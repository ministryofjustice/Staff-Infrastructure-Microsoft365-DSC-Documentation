# M365 Configuration as Code - Technical Guidance 


## Who is this for?

This page is intended for MoJ's engineering teams who are managing the configuration of M365 services, or intending to manage, with M365 desired state configuration integrated into MoJ's DevOps framework

## What is M365DSC?

Microsoft365DSC is an Open-Source initiative lead by Microsoft engineers and maintained by the community. It allows you to write a definition for how your Microsoft 365 tenant should be configured, automate the deployment of that configuration and ensures the monitoring of the defined configuration, notifying and acting on detected configuration drifts. 

It is the primary tool used by the MoJ to automate the management of the organisations tenants in line with the NCSC & Microsoft [blueprint for UK Government](https://www.gov.uk/guidance/microsoft-365-guidance-for-uk-government).

Microsoft365DSC is built as a module for the [PowerShell Desired State Configuration](https://learn.microsoft.com/en-us/powershell/scripting/dsc/overview) framework and is made available via the [PowerShell Gallery](https://www.powershellgallery.com/packages/Microsoft365DSC).

## Overview 

<Add content>

### Architecture 

![workflow diagram](../../images/workflow-diagram.png "workflow diagram")

### Workflow
1. Admin creates a new branch from the `main`Staff-Infrastructure-Microsoft365-DSC-Configuration repository, with a name relevant to the change they are making e.g. 'DEV-TeamsMeetingPolicy-update'
2. Admin makes the required configuration changes to the data files nessecary to the change they are making
3. Admin commits and syncs the changes to the forked repository
4. Admin creates a pull request (PR) to merge the changes to the 'main' repository, proving a description of what changes have been made to allow others to more efficiently peer review the work
5. The build pipeline runs on the PR
6. Depending on the files that have been changed the relevant lead engineers or architects will be asked to review and approve the change, this is defined based on the content of the 'codeowners' file
7. The merged PR triggers a pipeline to compile Managed Object Format (MOF) files. The pipeline calls Azure Key Vault to retrieve the credentials that are used by the tenant specific service principle(s) in the MOF files, and publishes the artifacts ready for deployment
8. The release pipeline is triggered that uses the compiled MOF files to deploy configuration changes to the tenants that are managed via Microsoft365DSC
9. Admin who commited the changes reviews the relevant pipeline & config in the M365 admin center to confirm the expected changes have been successfully applied

















## User Guidance 

<Add content>

### Getting Started 

<Add content>

### Approval Workflows 

<Add content>

### Shared Responsobility

<Add content>

### Getting Help

<Add content>

## Breaking Changes Release Schedule 

<Add content>

## Configuration

<Add content>

### Data Files 

<Add content>

### Environment

<Add content>

### Basic

<Add content>

### Mandatory

<Add content>

## Observability

<Add content>

### Monitoring

<Add content>

### Logging

<Add content>

## Reference

<Add content>


