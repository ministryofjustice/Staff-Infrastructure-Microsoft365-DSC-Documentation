# M365 Configuration as Code - Technical Guidance 

## Who is this for?

This page is intended for people who are responsible for the configuration, security and operation of the Ministry of Justices Microsoft 365 services. 

It holds information on the Ministry of Justices M365DSC DevOps integrated architecture, guidance and engineering references, intended scope & configuration overview, to help onboard and support the administrators of our tenants.

## What is M365DSC?

Microsoft365DSC is an Open-Source initiative lead by Microsoft engineers and maintained by the community. It allows you to write a definition for how your Microsoft 365 tenant should be configured, automate the deployment of that configuration and ensures the monitoring of the defined configuration, notifying and acting on detected configuration drifts. 

It is the primary tool used by the MoJ to automate the management of the organisations tenants in line with the NCSC & Microsoft [blueprint for UK Government](https://www.gov.uk/guidance/microsoft-365-guidance-for-uk-government).

Microsoft365DSC is built as a module for the [PowerShell Desired State Configuration](https://learn.microsoft.com/en-us/powershell/scripting/dsc/overview) framework and is made available via the [PowerShell Gallery](https://www.powershellgallery.com/packages/Microsoft365DSC).

## Overview 

### Architecture 

![workflow diagram](../images/workflow-diagram.png "workflow diagram")

### Workflow

1. Admin creates a new branch from the `main` Staff-Infrastructure-Microsoft365-DSC-Configuration repository, with a name relevant to the change they are making e.g. `DEV-TeamsMeetingPolicy-update`
2. Admin makes the required configuration changes to the data files nessecary to the change they are making
3. Admin commits and syncs the changes to the forked repository
4. Admin creates a pull request (PR) to merge the changes to the `main` repository, proving a description of what changes have been made to allow others to more efficiently peer review the work
5. The build pipeline runs on the PR
6. Depending on the files that have been changed the relevant lead engineers or architects will be asked to review and approve the change, this is defined based on the content of the `codeowners` file
7. The merged PR triggers a pipeline to compile Managed Object Format (MOF) files. The pipeline calls Azure Key Vault to retrieve the credentials that are used by the tenant specific service principle(s) in the MOF files, and publishes the artifacts ready for deployment
8. The release pipeline is triggered that uses the compiled MOF files to deploy configuration changes to the tenants that are managed via Microsoft365DSC
9. Admin who commited the changes reviews the relevant pipeline & config in the M365 admin center to confirm the expected changes have been successfully applied

### Components

* Azure DevOps - Azure DevOps is a comprehensive suite of development tools and services that are used by MoJ to facilitate the development testing, and delivery of M365 configuration through a collaborative and integrated environment, with robust Continuous Integration and Continuous Deployment (CI/CD) capabilities.
* Azure Pipelines - Azure Pipelines are an Azure DevOps service for continuous integration and continuous delivery (CI/CD). Use Azure Pipelines to test and build your code and ship it to any target. You can also use Azure Pipelines to implement quality gates to help ensure that you deploy changes in a controlled and consistent manner.
* Managed DevOps Pool - Managed DevOps Pools in Azure DevOps provide a fully managed service where virtual machines or containers powering the agents reside in a Microsoft Azure subscription, offering seamless scalability and management for CI/CD pipelines.
* NAT Gateway - Azure NAT Gateway is a fully managed and highly resilient Network Address Translation (NAT) service that enables instances in a private subnet to connect outbound to the internet while remaining fully private, ensuring secure and scalable outbound connectivity.
* Key Vault - Key Vault improves the security of storage for tokens, passwords, certificates, API keys, and other secrets. It also provides tightly controlled access to these secrets. Use Key Vault to store service principals and certificates that you use to deploy configuration changes to Microsoft 365 tenants.
* Storage Account - Azure Storage Accounts provide scalable and secure storage solutions for various data types, including blobs, files, queues, and tables, and are used in an M365 DevOps framework to store and manage modules, ensuring efficient and reliable deployment and configuration of Microsoft 365 environments.
* Microsoft365DSC - provides automation for the deployment, configuration, and monitoring of Microsoft 365 tenants via PowerShell Desired Stage Configuration (DSC). Use Microsoft365DSC to deploy configuration changes to Microsoft 365 tenants via Azure Pipelines.
* Windows PowerShell DSC - is a management platform in PowerShell. You can use it to manage your development infrastructure by using a configuration-as-code model. This model is the underlying technology that Microsoft365DSC uses.
* GitHub - GitHub is a leading platform for version control and collaboration, enabling developers to manage and share their code, track changes, and collaborate on projects seamlessly.


### Pipelines 

#### Build Pipeline

When a PR is merged, the Build pipeline is triggered. This pipeline performs these steps:

1. Prepare the agent: Install all prerequisite modules and configure settings on the agent.
2. Validate secrets: Check if all secrets used in the data files actually exist in the Azure Key Vault.
3. Pre build: Run several unit tests making sure all data is valid. This step also merges the data files in the Basic and Tenant data files.
4. Build: Compile the merged data files into a MOF file, which can then be deploy
5. Post build: This step updates configuration in Azure DevOps making sure the deployment matches the configuration specified in the `environment#generic.psd1` files.
6. Publish artifacts: The Build process not just generates the MOF files, but also saves the merged data files. These are also included in the artifacts, so they can be used for troubleshooting


#### Release pipeline

After a successful build, a Release pipeline is triggered. Based on the deployment order defined in the data files, the Release pipeline executes the following steps for each tenant:

1. Configure the agent: Configure required settings on the agent.
2. Prepare modules: Download all required modules from the Azure Blob Storage.
3. Download secrets: Download all required secrets from the Key Vault, so they can be used by the agent.
4. Deploy configurations: Deploy the MOF file to the target Microsoft 365 tenant.

### Azure Well-Architected Framework Alignment

This section details how our solution aligns with the Microsoft Well-Architected Framework, ensuring a robust, secure, and efficient architecture. By adhering to the five core pillars of the framework—Reliability, Security, Cost Optimization, Operational Excellence, and Performance Efficiency—we have designed a solution that meets the standards set out in the framework. Our approach includes implementing stringent security measures to protect data integrity and confidentiality, optimizing costs through efficient resource management, and ensuring operational excellence with comprehensive monitoring and automated systems.

#### Reliability

Deploying a Managed DevOps Pool to run our pipelines on significantly enhances reliability. Managed DevOps Pools provide a fully managed service where virtual machines powering the agents rely on Microsofts infrastructure for reliability ensuring that availability and fault tolerance is managed by Microsoft therefore reducing the risk of downtime and improving overall system stability. The managed nature of these pools means that updates, scaling, and maintenance are handled automatically, ensuring consistent performance and minimizing disruption

#### Secuirty 

Using the combination of Managed DevOps Pools, NAT Gateway, and Private Endpoints for Key Vault and Storage Account access significantly enhances the security of our solution, aligning with the Security pillar of the Microsoft Well-Architected Framework. Managed DevOps Pools ensure that the infrastructure is maintained by Microsoft, reducing vulnerabilities and ensuring compliance with security best practices. The NAT Gateway provides secure outbound internet connectivity for resources in private subnets with a dedicated public IP address to be used within condtional access on the managed tenants, while preventing unsolicited inbound connections, adhering to the zero trust network security model. Additionally, Private Endpoints for Key Vault and Storage Accounts enable secure, private access to these resources by using private IP addresses within the virtual network, eliminating exposure to the public internet. This setup ensures that sensitive data remains protected and access is tightly controlled.

#### Cost Optimization

Due to the small footprint of resources required for this solution it nativley comes with a low total cost of ownership, this has been further supplimented by the auto scaling features of Managed DevOps Pools to ensure there is no requirement for standing disk and compute.

#### Operational Excellence 

Separate GitHub repositories and Azure DevOps projects are used to segregate the management of the tenant configurations from the CICD infrastructure to ensure that access to resources are limited to the teams who are responsible for parts of the service. Furthermore the DSC configuration leverages the use of tenant specific data files combined with shared baseline configurations to promote modularity, reduces redundancy, and improves maintainability. 

The use of the CODEOWNERS file within the configuration repository allows GitHub teams to be set as the owners of specific files to be used within approval workflows to ensure that any changes made to configurations are approved by the technical authority of the product team who are responsible for the given M365 service. 

This approach aligns with industry best practices for managing DSC configurations, ensuring modularity, security, and maintainability. It also supports the Well-Architected Frameworks principles of operational excellence and security by providing a structured and secure approach to configuration management

#### Performance Efficiency

This architecture makes use of a storage account to cache the M365DSC modules and its prerequisites to make them readily available to the agent pool upon each pipeline run. When a new version of M365DSC is specified in the CICD repository, a pipeline will automatically make sure the prerequisites are downloaded, packaged and uploaded to the specified Blob Storage, this improves the performance of each pipeline run by decreasing the agent preperation time therefore improving the performance efficiency of the solution.








## Guidance 

<Add content>

### Getting Started 

To begin managing your configuration with M365DSC, start by familiarising yourself with the core concepts and prerequisites. Ensure you have the necessary permissions and access to the Microsoft 365 tenants, Azure DevOps project(s) & GitHub repositories. 

Administrative identities and a privilaged access workstation can be requested using [this](https://mojprod.service-now.com/moj_sp?id=sc_cat_item&table=sc_cat_item&sys_id=8161246a1b170a50a1e2ddf0b24bcbdb&searchTerm=technical%20access#BL1) Service Now request.

The CICD repository can be found here, the Configuration repository can be found here. The appropriate access to these repositories will be automatically granted based on your GitHub team membership.

### Learning Material 

#### GitHub Basics

Creating a Pull Request: This guide explains how to create a pull request on GitHub, which is essential for collaborating on code changes.
[https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request)

About Branches: Learn about branches in GitHub, how to create them, and how to use them for isolated development work.
[https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches)

Git manual: [https://git-scm.com/book/en/v2](https://git-scm.com/book/en/v2)

#### Desired State Configuration basics
Getting Started with Desired State Configuration (DSC) for Windows: This article provides a comprehensive introduction to DSC, including installation and basic usage.
[https://learn.microsoft.com/en-us/powershell/dsc/getting-started/wingettingstarted](https://learn.microsoft.com/en-us/powershell/dsc/getting-started/wingettingstarted)

PowerShell Desired State Configuration (DSC) Overview: An overview of DSC, explaining its purpose and how it works.
[https://learn.microsoft.com/en-us/powershell/scripting/dsc/overview](https://learn.microsoft.com/en-us/powershell/scripting/dsc/overview)

#### Microsoft365DSC

Microsoft 365 DSC User Guide: Introduction
[https://microsoft365dsc.com/user-guide/get-started/introduction](https://microsoft365dsc.com/user-guide/get-started/introduction)

Microsoft 365 DSC Resources: Overview
[https://microsoft365dsc.com/resources/overview](https://microsoft365dsc.com/resources/overview)

### What should be managed in M365DSC?

The intended scope of management in M365DSC should focus on persistent, core configuration settings that are crucial for maintaining the desired state of the tenants. This includes settings such as conditional access policies & compliance configurations. M365DSC is not intended for managing disposable configurations, such as user and group management, which are more transient and subject to frequent changes. By concentrating on stable, foundational settings, M365DSC ensures a consistent and secure configuration baseline across the organisation.

### Shared Responsobility

The following diagram details the split of responsobility for components that make up this service.

<ADD DIAGRAM HERE>

### Getting Help

<Add content>














## Configuration

The following section details how the workload configuration is set between the various data files within the Configuration repository.

### Data Files

A data file in PowerShell Desired State Configuration (DSC) is a structured file that contains configuration data, such as node-specific settings and environment variables, which are used to customize and manage the desired state of target nodes/workload

When reviewing the Configuration repository, you will see a folder called `datafiles`. This folder contains two child folders, one named `environments` and another called `templates`

The `environments` folder contains all of the tenant specific configuration files, the `templates` folder contains all of the shared baseline configuration files that are to be applied to all tenants under the management of M365DSC.


### Basic

The basic layer data files define the workload settings that will be applied to all tenants that are under the management of M365DSC, a baseline.

### Environment

The Environment layer are the settings that are tenant specific. Either because the workload setting is specific to only that tenant so cannot be present in the basic configuration, or because you want to override a setting from the Basic layer (SettingX = 1 in Basic, but for this environment it should be SettingX = 2)

### Mandatory

The mandatory data files contain settings that are mandatory for all environments. Settings in this file must be present in the basic files with the same values and cannot be specified in any of the environment specific files.

These settings are validated using a to a unit test approach during the build pipeline, this is first validated against the basic layer, requiring all settings that are present in the mandatory data files to be configured exactly as specified in the related basic datafiles. If this test is successful a second unit test is carried out against the environment layer checking that none of the settings are present within tenant specific files, preventing all settings in the Mandatory layer from being overridden with different values.



## How we handle the breaking changes release schedule 


<Add content>


## Reference

<Add content>


